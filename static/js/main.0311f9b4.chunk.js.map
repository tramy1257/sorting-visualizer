{"version":3,"sources":["components/SortingPanels/SelectionSort/SelectionVisualizer/SelectionVisualizer.module.css","hoc/Aux.js","assets/colors.js","components/SortingPanels/UI/Bar/Bar.js","components/SortingPanels/SelectionSort/SelectionVisualizer/SelectionVisualizer.js","assets/sort-visual-algos.js","assets/animation-ops.js","components/SortingPanels/SelectionSort/SelectionSort.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","aux","props","children","zenburnColor","SORTED_COLOR","UNSORTED_COLOR","bar","barWidth","barStyle","height","barHeight","width","margin","backgroundColor","sorted","order","barIdx","id","style","color","marginTop","textAlign","padding","value","selectionVisualizer","array","console","log","bars","this","map","index","Bar","Math","max","display","justifyContent","alignItems","className","classes","SelectionVisualizer","React","Component","getOperationLog","arr","sortType","operationLog","sortedArr","insertionSort","bubbleSort","selectionSort","simpleSort","logs","arrCopy","arrIniIndex","ele","i","length","j","push","swap","minIdx","index1","index2","temp","animationOps","compareOp","bar1","bar2","compareColor","stepSpeed","setTimeout","swapOp","swapColor","translateAmount","getBoundingClientRect","x","transition","transform","swapDoneOp","unsortedColor","compareDoneOp","COMPARE_COLOR","SWAP_COLOR","STEP_SPEED","SelectionSort","state","sortHandler","document","getElementById","setState","testHandler","Aux","onClick","bind","App","renderArray","num","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,oBAAsB,iDAAiD,IAAM,mC,oJCChFC,EAFH,SAACC,GAAD,OAAWA,EAAMC,U,wBCAhBC,EAEL,UAFKA,EAKL,UALKA,EAMN,UCFDC,EDGG,UCFHC,EAAiBF,EA+BRG,EA7BH,SAACL,GACX,IAAoBM,EAIdC,EAAW,CACfC,OAASR,EAAMS,UAAa,IAC5BC,MAAOV,EAAMM,SAAW,KACxBK,QAPkBL,EAOCN,EAAMM,SANlBA,EAAW,GAMmB,MACrCM,gBAAiBZ,EAAMa,OAASV,EAAeC,EAC/CU,MAAOd,EAAMe,QAUf,OACE,qBACEC,GAAI,MAAQhB,EAAMe,OAClBE,MAAOV,EAFT,SAGE,mBAAGU,MAXW,CAChBC,MAAO,QACPC,UAAW,OACXC,UAAW,SACXC,QAAS,KAOP,SAAsBrB,EAAMsB,WCYnBC,E,4MAtCbC,MAAQ,EAAKxB,MAAMwB,M,mEAGjBC,QAAQC,IAAI,iD,+BAGH,IAAD,OAUJC,EAAOC,KAAKJ,MAAMK,KAAK,SAACP,EAAOQ,GACjC,OAAO,cAACC,EAAD,CACLlB,OAAQ,EAAKb,MAAMa,OACnBE,OAAQe,EACRR,MAAOA,EACPb,UAAWa,EAAMU,KAAKC,IAAL,MAAAD,KAAI,YAAQ,EAAKR,QAAO,IACzClB,SAAU,IACLwB,MAMT,OAFAH,EAAO,qBAAKV,MAnBM,CAChBiB,QAAS,OACTC,eAAgB,SAChBC,WAAY,WACZ5B,OAAQ,QAeH,SAAwBmB,IAG7B,qBAAKU,UAAWC,IAAQC,oBAAxB,SACGZ,Q,GAhCyBa,IAAMC,WCJ3BC,EAAkB,SAACC,EAAKC,GACnC,IAAIC,EAAe,GACfC,EAAY,GAEhB,OAAQF,GACN,IAAK,YACHE,EAAYC,EAAcJ,EAAKE,GAC/B,MACF,IAAK,SACHC,EAAYE,EAAWL,EAAKE,GAC5B,MACF,IAAK,YACHC,EAAYG,EAAcN,EAAKE,GAC/B,MACF,QACEC,EAAYI,EAAWP,EAAKE,GAGhC,MAAO,CAACA,EAAcC,IAIlBC,EAAgB,SAACJ,EAAKQ,GAK3B,IAJC,IAAIC,EAAO,YAAOT,GAEdU,EAAcD,EAAQvB,KAAI,SAACyB,EAAKxB,GAAN,OAAgBA,KAEtCyB,EAAI,EAAGA,EAAIH,EAAQI,OAAS,EAAGD,IACvC,IAAK,IAAIE,EAAIF,EAAI,EAAGE,GAAK,EAAGA,IAAK,CAE7B,GADAN,EAAKO,KAAK,CAAC,UAAWL,EAAYI,GAAIJ,EAAYI,EAAI,OAClDL,EAAQK,GAAKL,EAAQK,EAAI,IAMxB,CACHN,EAAKO,KAAK,CAAC,eAAgBL,EAAYI,GAAIJ,EAAYI,EAAI,KAC3D,MAPAN,EAAKO,KAAK,CAAC,OAAQL,EAAYI,GAAIJ,EAAYI,EAAI,KACtDE,EAAKP,EAASK,EAAI,EAAGA,GAClBE,EAAKN,EAAaI,EAAI,EAAGA,GACzBN,EAAKO,KAAK,CAAC,YAAaL,EAAYI,GAAIJ,EAAYI,EAAI,KAS/D,OAAOL,GAIFJ,EAAa,SAACL,EAAKQ,GAOxB,IANC,IAAIC,EAAO,YAAOT,GAEdU,EAAcD,EAAQvB,KAAI,SAACyB,EAAKxB,GAAN,OAAgBA,KAE3CjB,GAAS,GAELA,GAAQ,CACfA,GAAS,EACT,IAAK,IAAI0C,EAAI,EAAGA,EAAIH,EAAQI,OAAS,EAAGD,IACpCJ,EAAKO,KAAK,CAAC,UAAWL,EAAYE,GAAIF,EAAYE,EAAI,KACrDH,EAAQG,GAAKH,EAAQG,EAAI,IAC5B1C,GAAS,EAELsC,EAAKO,KAAK,CAAC,OAAQL,EAAYE,GAAIF,EAAYE,EAAI,KAEnDI,EAAKP,EAASG,EAAGA,EAAI,GACrBI,EAAKN,EAAaE,EAAGA,EAAI,GAEzBJ,EAAKO,KAAK,CAAC,YAAaL,EAAYE,GAAIF,EAAYE,EAAI,MAGxDJ,EAAKO,KAAK,CAAC,eAAgBL,EAAYE,GAAIF,EAAYE,EAAI,KAIlE,OAAOH,GAIFH,EAAgB,SAACN,EAAKQ,GAM1B,IALA,IAAIC,EAAO,YAAOT,GAEdU,EAAcD,EAAQvB,KAAI,SAACyB,EAAKxB,GAAN,OAAgBA,KAGrCyB,EAAI,EAAGA,EAAIH,EAAQI,OAAS,IAAKD,EAAG,CAE3C,IADA,IAAIK,EAAQL,EACHE,EAAIF,EAAI,EAAGE,EAAIL,EAAQI,SAAUC,EACxCN,EAAKO,KAAK,CAAC,UAAWL,EAAYE,GAAIF,EAAYI,KAClDN,EAAKO,KAAK,CAAC,eAAgBL,EAAYE,GAAIF,EAAYI,KACnDL,EAAQK,GAAKL,EAAQQ,KACvBA,EAASH,GAITN,EAAKO,KAAK,CAAC,OAAQL,EAAYE,GAAIF,EAAYO,KAE/CD,EAAKP,EAASG,EAAGK,GACjBD,EAAKN,EAAaE,EAAGK,GAErBT,EAAKO,KAAK,CAAC,YAAaL,EAAYE,GAAIF,EAAYO,KAE1D,OAAOR,GAKHF,EAAa,SAACP,EAAKQ,GAMvB,IALA,IAAIC,EAAO,YAAOT,GAEdU,EAAcD,EAAQvB,KAAI,SAACyB,EAAKxB,GAAN,OAAgBA,KAGrCyB,EAAI,EAAGA,EAAIH,EAAQI,OAAS,IAAKD,EACxC,IAAK,IAAIE,EAAIF,EAAI,EAAGE,EAAIL,EAAQI,SAAUC,EACxCN,EAAKO,KAAK,CAAC,UAAWL,EAAYE,GAAIF,EAAYI,KAC9CL,EAAQK,GAAKL,EAAQG,IACvBJ,EAAKO,KAAK,CAAC,OAAQL,EAAYE,GAAIF,EAAYI,KAG/CE,EAAKP,EAASG,EAAGE,GACjBE,EAAKN,EAAaE,EAAGE,GAErBN,EAAKO,KAAK,CAAC,YAAaL,EAAYE,GAAIF,EAAYI,MAGpDN,EAAKO,KAAK,CAAC,eAAgBL,EAAYE,GAAIF,EAAYI,KAI7D,OAAOL,GAIHO,EAAO,SAAChB,EAAKkB,EAAQC,GAC1B,IAAMC,EAAOpB,EAAIkB,GACjBlB,EAAIkB,GAAUlB,EAAImB,GAClBnB,EAAImB,GAAUC,GCvEAC,EARM,CACnBC,UAzDgB,SAACV,EAAGW,EAAMC,EAAMC,EAAcC,GAC9CC,YAAa,WAEXJ,EAAKjD,MAAML,gBAAkBwD,EAC7BD,EAAKlD,MAAML,gBAAkBwD,IAC5Bb,EAAIc,IAqDPE,OAlDa,SAAChB,EAAGW,EAAMC,EAAMK,EAAWH,GACxCC,YAAa,WAEXJ,EAAKjD,MAAML,gBAAkB4D,EAC7BL,EAAKlD,MAAML,gBAAkB4D,EAG7B,IAAIC,EAAkBN,EAAKO,wBAAwBC,EAC3BT,EAAKQ,wBAAwBC,EAGrDT,EAAKjD,MAAM2D,WAAX,oBAAqCP,EAAY,IAAjD,KACAH,EAAKjD,MAAM4D,UAAX,qBAAqCJ,EAArC,OAGAN,EAAKlD,MAAM2D,WAAX,oBAAqCP,EAAY,IAAjD,KACAF,EAAKlD,MAAM4D,UAAX,sBAAsCJ,EAAtC,SACClB,EAAIc,IAkCPS,WAvBiB,SAACvB,EAAGW,EAAMC,EAAMY,EAAeV,GAChDC,YAAa,WAEXJ,EAAKjD,MAAML,gBAAkBmE,EAC7BZ,EAAKlD,MAAML,gBAAkBmE,EAG7BZ,EAAKlD,MAAM2D,WAAa,eACxBT,EAAKlD,MAAM4D,UAAX,kBAEAX,EAAKjD,MAAM2D,WAAa,eACxBV,EAAKjD,MAAM4D,UAAX,kBAGA,IAAMd,EAAOI,EAAKlD,MAAMH,MACxBqD,EAAKlD,MAAMH,MAAQoD,EAAKjD,MAAMH,MAC9BoD,EAAKjD,MAAMH,MAAQiD,IAClBR,EAAIc,IAOPW,cAhCoB,SAACzB,EAAGW,EAAMC,EAAMY,EAAeV,GACnDC,YAAa,WAEXJ,EAAKjD,MAAML,gBAAkBmE,EAC7BZ,EAAKlD,MAAML,gBAAkBmE,IAC5BxB,EAAIc,KCzBHY,EAAgB/E,EAChBgF,EAAahF,EACbE,EAAiBF,EAGjBiF,EAAa,GAuEJC,E,4MApEbC,MAAQ,CACN7D,MAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAClCX,QAAQ,G,EAGVyE,YAAc,SAAC1C,GAQb,IAR0B,MAEAF,EAAgB,EAAK2C,MAAM7D,MAAOoB,GAFlC,mBAEnBO,EAFmB,KAEbL,EAFa,KAQjBS,EAAI,EAAGA,EAAIJ,EAAKK,SAAUD,EAAG,CAEpC,IAAMW,EAAOqB,SAASC,eAAe,MAAQrC,EAAKI,GALP,IAMrCY,EAAOoB,SAASC,eAAe,MAAQrC,EAAKI,GANrB,IAQ7B,OAAQJ,EAAKI,GARE,IASb,IAAK,UACHS,EAAaC,UAAUV,EAAGW,EAAMC,EAAMc,EAAeE,GACrD,MACF,IAAK,OACHnB,EAAaO,OAAOhB,EAAGW,EAAMC,EAAMe,EAAYC,GAC/C,MACF,IAAK,eACHnB,EAAagB,cAAczB,EAAGW,EAAMC,EAAM/D,EAAgB+E,GAC1D,MACF,IAAK,YACHnB,EAAac,WAAWvB,EAAGW,EAAMC,EAAM/D,EAAgB+E,IAS7Db,YAAY,WACV,EAAKmB,SAAS,CAAC5E,QAAQ,IACvB,EAAK4E,SAAS,CAACjE,MAAOsB,MACrBK,EAAKK,OAAS2B,I,EAInBO,YAAc,a,mEAIZjE,QAAQC,IAAI,2C,+BAIZ,OACE,eAACiE,EAAD,WACE,gDACA,cAACpD,EAAD,CAAqB1B,OAAQe,KAAKyD,MAAMxE,OAAQW,MAAOI,KAAKyD,MAAM7D,QAClE,wBAAQoE,QAAShE,KAAK0D,YAAYO,KAAKjE,KAAM,UAA7C,yBACA,wBAAQgE,QAAShE,KAAK0D,YAAYO,KAAKjE,KAAM,aAA7C,4BACA,wBAAQgE,QAAShE,KAAK0D,YAAYO,KAAKjE,KAAM,UAA7C,yBACA,wBAAQgE,QAAShE,KAAK0D,YAAYO,KAAKjE,KAAM,aAA7C,4BACA,wBAAQgE,QAAShE,KAAK8D,YAAtB,yB,GA9DoBlD,IAAMC,WCInBqD,MAjBf,WACE,IAAItE,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/BuE,EAAc,SAACpD,GAAD,OAASA,EAAId,KAAK,SAACmE,GAAD,OAASA,EAAM,QAErD,OACE,sBAAK3D,UAAU,MAAf,UACE,cAAC,EAAD,IACA,gDACA,4BAAI0D,EAAYvE,KAChB,+CACA,4BAAIuE,EAAYvE,SCAPyE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASC,eAAe,SAM1BS,M","file":"static/js/main.0311f9b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SelectionVisualizer\":\"SelectionVisualizer_SelectionVisualizer__Zy5EK\",\"red\":\"SelectionVisualizer_red__2RrXi\"};","const aux = (props) => props.children;\n\nexport default aux;\n","export const zenburnColor = {\n  background: '#3a3a3a',\n  grey: '#99a49e',\n  red: '#d38585',\n  yellow: '#ffff87',\n  blue: '#82d1d1',\n  tan: '#d7af86',\n  green: '#86ae86'\n}\n","import React from 'react';\nimport { zenburnColor } from '../../../../assets/colors';\n//import Radium from radium;\n\nconst SORTED_COLOR = zenburnColor.green;\nconst UNSORTED_COLOR = zenburnColor.grey;\n\nconst bar = (props) => {\n  const calcMargin = (barWidth) => {\n    return barWidth / 30;\n  };\n\n  const barStyle = {\n    height: (props.barHeight) + '%',\n    width: props.barWidth + 'px',\n    margin: calcMargin(props.barWidth) + 'px',\n    backgroundColor: props.sorted ? SORTED_COLOR : UNSORTED_COLOR,\n    order: props.barIdx\n  };\n\n  const textStyle = {\n    color: 'white',\n    marginTop: '10px',\n    textAlign: 'center',\n    padding: '0'\n  }\n\n  return (\n    <div \n      id={'bar' + props.barIdx}\n      style={barStyle}>\n      <p style={textStyle}>{props.value}</p>\n    </div>\n  );\n}\n\nexport default bar;\n","import React from 'react';\nimport classes from './SelectionVisualizer.module.css';\nimport Bar from '../../UI/Bar/Bar';\n\nclass selectionVisualizer extends React.Component{ \n  array = this.props.array;\n\n  componentDidUpdate() {\n    console.log('[SelectionVisualizer.js] componentDidUpdate');\n  }\n\n  render () {\n    // Styling the div that contains all the bars\n    const barsStyle = {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'flex-end',\n      height: '100%'\n    };\n\n    // The list of bars\n    let bars = this.array.map( (value, index) => {\n      return <Bar \n        sorted={this.props.sorted}\n        barIdx={index}\n        value={value} \n        barHeight={value/Math.max(...this.array)*100}\n        barWidth={80} \n        key={index} />;\n    } );\n\n    // Wrap the list of bars inside a div and style them\n    bars = <div style={barsStyle}>{bars}</div>;\n\n    return (\n      <div className={classes.SelectionVisualizer}>\n        {bars}\n      </div>\n    );\n  } // render()\n\n};\n\nexport default selectionVisualizer;\n","export const getOperationLog = (arr, sortType) => {\n  let operationLog = [];\n  let sortedArr = [];\n  \n  switch (sortType) {\n    case 'insertion':\n      sortedArr = insertionSort(arr, operationLog);\n      break;\n    case 'bubble':\n      sortedArr = bubbleSort(arr, operationLog);\n      break;\n    case 'selection':\n      sortedArr = selectionSort(arr, operationLog);\n      break;\n    default:\n      sortedArr = simpleSort(arr, operationLog);\n      break;\n  }\n  return [operationLog, sortedArr];\n};\n\n// --------- Insertion Sort -----------\nconst insertionSort = (arr, logs) => {\n  let arrCopy = [...arr]; // prevents modification of the original array\n  // arrIniIndex stores the index of each element in the initial unsorted list\n  let arrIniIndex = arrCopy.map((ele, index) => index);\n\n\tfor (let i = 0; i < arrCopy.length - 1; i++) {\n\t\tfor (let j = i + 1; j >= 1; j--) {\n      logs.push(['compare', arrIniIndex[j], arrIniIndex[j - 1]]);\n      if (arrCopy[j] < arrCopy[j - 1]) {\n        logs.push(['swap', arrIniIndex[j], arrIniIndex[j - 1]]);\n\t\t\t  swap(arrCopy, j - 1, j);\n        swap(arrIniIndex, j - 1, j);\n        logs.push(['swap-done', arrIniIndex[j], arrIniIndex[j - 1]]);\n      }\n      else {\n        logs.push(['compare-done', arrIniIndex[j], arrIniIndex[j - 1]]);\n        break;\n      }\n\t\t}// inner for\n\t} // outer for\n\t\n\treturn arrCopy;\n}\n\n// --------- Bubble Sort -----------\nconst bubbleSort = (arr, logs) => {\n  let arrCopy = [...arr]; // prevents modification of the original array\n  // arrIniIndex stores the index of each element in the initial unsorted list\n  let arrIniIndex = arrCopy.map((ele, index) => index);\n\n\tlet sorted = false; // Keeps track of whether any swap is performed\n\n\twhile (!sorted) {\n\t\tsorted = true; // is true until a swap is performed\n\t\tfor (let i = 0; i < arrCopy.length - 1; i++) {\n      logs.push(['compare', arrIniIndex[i], arrIniIndex[i + 1]]);\n\t\t\tif (arrCopy[i] > arrCopy[i + 1]) {\n\t\t\t\tsorted = false; // Swap is performed so the array is not sorted\n\n        logs.push(['swap', arrIniIndex[i], arrIniIndex[i + 1]]);\n\n        swap(arrCopy, i, i + 1);\n        swap(arrIniIndex, i, i + 1);\n\n        logs.push(['swap-done', arrIniIndex[i], arrIniIndex[i + 1]]);\n\t\t\t}// end if\n      else {\n        logs.push(['compare-done', arrIniIndex[i], arrIniIndex[i + 1]]);\n      }\n\t\t}// end for\n\t}\n\treturn arrCopy;\n}\n\n// --------- Selection Sort ----------\nconst selectionSort = (arr, logs) => {\n  let arrCopy = [...arr]; // Prevent mutation\n  // arrIniIndex stores the index of each element in the initial unsorted list\n  let arrIniIndex = arrCopy.map((ele, index) => index);\n\n  // Sorting:\n  for (let i = 0; i < arrCopy.length - 1; ++i) {\n    let minIdx= i;\n    for (let j = i + 1; j < arrCopy.length; ++j) {\n      logs.push(['compare', arrIniIndex[i], arrIniIndex[j]]);\n      logs.push(['compare-done', arrIniIndex[i], arrIniIndex[j]]);\n      if (arrCopy[j] < arrCopy[minIdx]) {\n        minIdx = j;\n      } // if\n    } // inner for\n\n        logs.push(['swap', arrIniIndex[i], arrIniIndex[minIdx]]);\n        // Swapping array elements and their initial indexes\n        swap(arrCopy, i, minIdx);\n        swap(arrIniIndex, i, minIdx);\n\n        logs.push(['swap-done', arrIniIndex[i], arrIniIndex[minIdx]]);\n  } // outer for\n  return arrCopy;\n};\n\n\n// --------- Simple sort ------------\nconst simpleSort = (arr, logs) => {\n  let arrCopy = [...arr]; // Prevent mutation\n  // arrIniIndex stores the index of each element in the initial unsorted list\n  let arrIniIndex = arrCopy.map((ele, index) => index);\n\n  // Sorting:\n  for (let i = 0; i < arrCopy.length - 1; ++i) {\n    for (let j = i + 1; j < arrCopy.length; ++j) {\n      logs.push(['compare', arrIniIndex[i], arrIniIndex[j]]);\n      if (arrCopy[j] < arrCopy[i]) {\n        logs.push(['swap', arrIniIndex[i], arrIniIndex[j]]);\n        \n        // Swapping array elements and their initial indexes\n        swap(arrCopy, i, j);\n        swap(arrIniIndex, i, j);\n\n        logs.push(['swap-done', arrIniIndex[i], arrIniIndex[j]]);\n      } // if\n      else {\n        logs.push(['compare-done', arrIniIndex[i], arrIniIndex[j]]);\n      }\n    } // inner for\n  } // outer for\n  return arrCopy;\n};\n\n// Swapping\nconst swap = (arr, index1, index2) => {\n\tconst temp = arr[index1];\n\tarr[index1] = arr[index2];\n\tarr[index2] = temp;\n}; // swap()\n\n","const compareOp = (i, bar1, bar2, compareColor, stepSpeed) => {\n  setTimeout ( () => {\n    // Change color to compare color\n    bar1.style.backgroundColor = compareColor;\n    bar2.style.backgroundColor = compareColor;\n  }, i * stepSpeed);\n}\n\nconst swapOp = (i, bar1, bar2, swapColor, stepSpeed) => {\n  setTimeout ( () => {\n    // Change color to swap color\n    bar1.style.backgroundColor = swapColor;\n    bar2.style.backgroundColor = swapColor;\n    \n    // Calculate the amount to translate\n    let translateAmount = bar2.getBoundingClientRect().x - \n                            bar1.getBoundingClientRect().x;\n    \n    // Animate translating first bar\n    bar1.style.transition = `transform ${stepSpeed / 1000}s`;\n    bar1.style.transform = `translateX(${translateAmount}px)`;\n\n    // Animate translating second bar\n    bar2.style.transition = `transform ${stepSpeed / 1000}s`;\n    bar2.style.transform = `translateX(${-translateAmount}px)`;\n  }, i * stepSpeed);\n}\n\nconst compareDoneOp = (i, bar1, bar2, unsortedColor, stepSpeed) => {\n  setTimeout ( () => {\n    // Change color to unsorted color\n    bar1.style.backgroundColor = unsortedColor;\n    bar2.style.backgroundColor = unsortedColor;\n  }, i * stepSpeed);\n}\n\nconst swapDoneOp = (i, bar1, bar2, unsortedColor, stepSpeed) => {\n  setTimeout ( () => {\n    // Change color to unsorted color\n    bar1.style.backgroundColor = unsortedColor;\n    bar2.style.backgroundColor = unsortedColor;\n\n    // Clear transition property\n    bar2.style.transition = 'transform 0s';\n    bar2.style.transform = `translateX(0px)`;\n\n    bar1.style.transition = 'transform 0s';\n    bar1.style.transform = `translateX(0px)`;\n\n    // Update bar order\n    const temp = bar2.style.order;\n    bar2.style.order = bar1.style.order;\n    bar1.style.order = temp;\n  }, i * stepSpeed);\n}\n\nconst animationOps = {\n  compareOp: compareOp,\n  swapOp: swapOp,\n  swapDoneOp: swapDoneOp,\n  compareDoneOp: compareDoneOp\n}\n\n\nexport default animationOps;\n","import React from 'react';\nimport Aux from '../../../hoc/Aux';\nimport SelectionVisualizer from './SelectionVisualizer/SelectionVisualizer';\nimport { getOperationLog } from '../../../assets/sort-visual-algos';\nimport { zenburnColor } from '../../../assets/colors';\nimport animationOps from '../../../assets/animation-ops';\n\n// color for color-coding operation\nconst COMPARE_COLOR = zenburnColor.tan;\nconst SWAP_COLOR = zenburnColor.blue;\nconst UNSORTED_COLOR = zenburnColor.grey;\n\n// Program argument\nconst STEP_SPEED = 10; // Set animating speed of each step (in ms)\n\nclass SelectionSort extends React.Component { \n  state = {\n    array: [5,7,2,6,2,7,9,8,4,3,7,5,1,9],//3,9,3,5,7,2],\n    sorted: false\n  };\n\n  sortHandler = (sortType) => {\n    // save the operation log for animation\n    const [logs, sortedArr] = getOperationLog(this.state.array, sortType);\n    // each element in logs is an array of length 3, the 3 constants below\n    // indecate what information each index holds\n    const LOG_TYPE = 0, INI_IDX1 = 1, INI_IDX2 = 2;\n\n    // Animating based on operation logs\n    for (let i = 0; i < logs.length; ++i) {\n      // Find the 2 bars objects that gets swapped\n      const bar1 = document.getElementById('bar' + logs[i][INI_IDX2]);\n      const bar2 = document.getElementById('bar' + logs[i][INI_IDX1]);\n\n      switch (logs[i][LOG_TYPE]) {\n        case 'compare':\n          animationOps.compareOp(i, bar1, bar2, COMPARE_COLOR, STEP_SPEED);\n          break;\n        case 'swap':\n          animationOps.swapOp(i, bar1, bar2, SWAP_COLOR, STEP_SPEED);\n          break;\n        case 'compare-done':\n          animationOps.compareDoneOp(i, bar1, bar2, UNSORTED_COLOR, STEP_SPEED);\n          break;\n        case 'swap-done':\n          animationOps.swapDoneOp(i, bar1, bar2, UNSORTED_COLOR, STEP_SPEED);\n          break;\n        default:\n          break;\n      } // switch\n    } // for\n    \n    // Change all bars to green indecating that they are in sorted order and\n    // update the array state to the sorted one\n    setTimeout (() => {\n      this.setState({sorted: true});\n      this.setState({array: sortedArr});\n    }, logs.length * STEP_SPEED);\n  };\n\n  // For testing\n  testHandler = () => {\n  };\n\n  componentDidUpdate() {\n    console.log('[SelectionSort.js] componentDidUpdate');\n  }\n\n  render() {\n    return (\n      <Aux>\n        <h1>Selection Sort</h1>\n        <SelectionVisualizer sorted={this.state.sorted} array={this.state.array}/>\n        <button onClick={this.sortHandler.bind(this, 'simple')}>Simple Sort</button>\n        <button onClick={this.sortHandler.bind(this, 'selection')}>Selection Sort</button>\n        <button onClick={this.sortHandler.bind(this, 'bubble')}>Bubble Sort</button>\n        <button onClick={this.sortHandler.bind(this, 'insertion')}>Insertion Sort</button>\n        <button onClick={this.testHandler}>Test</button>\n      </Aux>\n    );\n  }\n}\n\n\nexport default SelectionSort;\n","import SelectionSort from './components/SortingPanels/SelectionSort/SelectionSort';\n\nfunction App() {\n  let array = [2, 5, 6, 1, 7, 9, 4, 3, 8];\n  const renderArray = (arr) => arr.map( (num) => num + \" \");\n\n  return (\n    <div className=\"App\">\n      <SelectionSort />\n      <p>Array to sort: </p>\n      <p>{renderArray(array)}</p>\n      <p>Sorted Array: </p>\n      <p>{renderArray(array)}</p>\n      \n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}