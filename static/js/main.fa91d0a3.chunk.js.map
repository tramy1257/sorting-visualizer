{"version":3,"sources":["components/ControlPanel/ControlPanel.module.css","components/SortingPanels/SwapSort/Bars/Bars.module.css","components/ControlPanel/UI/Button/Button.module.css","hoc/Aux.js","assets/colors.js","components/SortingPanels/UI/Bar/Bar.js","components/SortingPanels/SwapSort/Bars/Bars.js","assets/sort-visual-algos.js","assets/animation-ops.js","components/ControlPanel/UI/Button/Button.js","components/ControlPanel/ControlPanel.js","components/SortingPanels/SwapSort/SwapSort.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","aux","props","children","zenburnColor","background","grey","red","yellow","blue","tan","green","UNSORTED_COLOR","colors","bar","barStyle","height","barHeight","width","barWidth","margin","backgroundColor","id","barIdx","style","color","marginTop","textAlign","padding","fontSize","value","Bars","nextProps","array","this","bars","map","index","Bar","Math","max","display","justifyContent","alignItems","className","classes","React","Component","insertionSort","arr","logs","arrCopy","arrIniIndex","ele","i","length","j","push","swap","bubbleSort","sorted","selectionSort","minIdx","simpleSort","index1","index2","temp","animationOps","compareOp","bar1","bar2","compareColor","swapOp","swapColor","stepSpeed","translateAmount","getBoundingClientRect","x","transition","transform","swapDoneOp","unsortedColor","order","compareDoneOp","sortedBarOp","sortedColor","button","btnStyle","active","Button","onClick","click","controlPanel","Aux","SortAndStop","sortClicked","abortClicked","Panel","AlgoBtn","currentAlgo","selectionClicked","bubbleClicked","insertionClicked","simpleClicked","BottomPanel","BottomLeft","randomClicked","VerticalLine","BottomRight","SliderAndLabel","min","step","type","speed","onChange","event","changeSpeed","target","direction","slider","arrSize","changeArrSize","COMPARE_COLOR","SWAP_COLOR","SORTED_COLOR","SwapSort","randomArr","size","newArr","floor","random","animation","doneAnimate","sortHandler","sortType","operationLog","sortedArr","getOperationLog","state","document","getElementById","setInterval","clearInterval","sortedBar","setTimeout","setState","abortClickedHandler","clearTimeout","sortClickedHandler","sortAlgo","changeAlgoHandler","algoType","clickRandomHandler","randomArrSize","changeSpeedHandler","newSpeed","changeArrSizeHandler","newSize","initialArr","ControlPanel","bind","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fa91d0a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SortAndStop\":\"ControlPanel_SortAndStop__2DSQ1\",\"AlgoBtn\":\"ControlPanel_AlgoBtn__2tzN1\",\"Panel\":\"ControlPanel_Panel__305H8\",\"Input\":\"ControlPanel_Input__1b0vH\",\"InputDiv\":\"ControlPanel_InputDiv__3ZwNZ\",\"BottomPanel\":\"ControlPanel_BottomPanel__2UlpR\",\"BottomLeft\":\"ControlPanel_BottomLeft__23IfV\",\"BottomRight\":\"ControlPanel_BottomRight__2fqPx\",\"SliderAndLabel\":\"ControlPanel_SliderAndLabel__2MKIe\",\"slider\":\"ControlPanel_slider__10wv8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bars\":\"Bars_Bars__FBMYG\",\"red\":\"Bars_red__2-UZG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__aJmEA\"};","const aux = (props) => props.children;\n\nexport default aux;\n","const zenburnColor = {\n  background: '#3a3a3a',\n  grey: '#99a49e',\n  red: '#d38585',\n  yellow: '#ffff87',\n  blue: '#82d1d1',\n  tan: '#d7af86',\n  green: '#86ae86'\n}\n\nexport default zenburnColor;\n","import React from 'react';\nimport colors from '../../../../assets/colors';\n//import Radium from radium;\n\nconst UNSORTED_COLOR = colors.grey;\n\nconst bar = (props) => {\n  // Style for bars\n  const barStyle = {\n    height: (props.barHeight) + '%',\n    width: props.barWidth + 'px',\n    margin: '2px',\n    backgroundColor: UNSORTED_COLOR,\n  };\n  \n  // Style for text\n  const textStyle = {\n    color: 'white',\n    marginTop: '5px',\n    textAlign: 'center',\n    padding: '0',\n    fontSize: '15px'\n  }\n\n  return (\n    <div \n      id={'bar' + props.barIdx}\n      style={barStyle}>\n      <p style={textStyle}>{props.value}</p>\n    </div>\n  );\n}\n\nexport default bar;\n","import React from 'react';\nimport classes from './Bars.module.css';\nimport Bar from '../../UI/Bar/Bar';\n\nclass Bars extends React.Component{ \n  /* Testing purpose\n  componentDidUpdate() {\n    console.log('[Bars.js] componentDidUpdate');\n  }\n  */\n  shouldComponentUpdate(nextProps) {\n    return nextProps.array !== this.props.array;\n  }\n\n  render () {\n    const array = this.props.array;\n\n    // Styling the div that contains all the bars\n    const barsStyle = {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'flex-end',\n      height: '100%'\n    };\n\n    // The list of bars\n    let bars = array.map( (value, index) => {\n      return <Bar \n        barIdx={index}\n        value={value} \n        barHeight={value/Math.max(...array)*100}\n        barWidth={80} \n        key={index} />;\n    } );\n\n    // Wrap the list of bars inside a div and style them\n    bars = <div style={barsStyle}>{bars}</div>;\n\n    return (\n      <div className={classes.Bars}>\n        {bars}\n      </div>\n    );\n  } // render()\n\n};\n\nexport default Bars;\n","export const getOperationLog = (arr, sortType) => {\n  let operationLog = [];\n  let sortedArr = [];\n  \n  switch (sortType) {\n    case 'insertion':\n      sortedArr = insertionSort(arr, operationLog);\n      break;\n    case 'bubble':\n      sortedArr = bubbleSort(arr, operationLog);\n      break;\n    case 'selection':\n      sortedArr = selectionSort(arr, operationLog);\n      break;\n    default:\n      sortedArr = simpleSort(arr, operationLog);\n      break;\n  }\n  return [operationLog, sortedArr];\n};\n\n// --------- Insertion Sort -----------\nconst insertionSort = (arr, logs) => {\n  let arrCopy = [...arr]; // prevents modification of the original array\n  // arrIniIndex stores the index of each element in the initial unsorted list\n  let arrIniIndex = arrCopy.map((ele, index) => index);\n\n\tfor (let i = 0; i < arrCopy.length - 1; i++) {\n\t\tfor (let j = i + 1; j >= 1; j--) {\n      logs.push(['compare', arrIniIndex[j], arrIniIndex[j - 1]]);\n      if (arrCopy[j] < arrCopy[j - 1]) {\n        logs.push(['swap', arrIniIndex[j], arrIniIndex[j - 1]]);\n\t\t\t  swap(arrCopy, j - 1, j);\n        swap(arrIniIndex, j - 1, j);\n        logs.push(['swap-done', arrIniIndex[j], arrIniIndex[j - 1]]);\n      }\n      else {\n        logs.push(['compare-done', arrIniIndex[j], arrIniIndex[j - 1]]);\n        break;\n      }\n\t\t}// inner for\n\t} // outer for\n\t\n\treturn arrCopy;\n}\n\n// --------- Bubble Sort -----------\nconst bubbleSort = (arr, logs) => {\n  let arrCopy = [...arr]; // prevents modification of the original array\n  // arrIniIndex stores the index of each element in the initial unsorted list\n  let arrIniIndex = arrCopy.map((ele, index) => index);\n\n\tlet sorted = false; // Keeps track of whether any swap is performed\n\n\twhile (!sorted) {\n\t\tsorted = true; // is true until a swap is performed\n\t\tfor (let i = 0; i < arrCopy.length - 1; i++) {\n      logs.push(['compare', arrIniIndex[i], arrIniIndex[i + 1]]);\n\t\t\tif (arrCopy[i] > arrCopy[i + 1]) {\n\t\t\t\tsorted = false; // Swap is performed so the array is not sorted\n\n        logs.push(['swap', arrIniIndex[i], arrIniIndex[i + 1]]);\n\n        swap(arrCopy, i, i + 1);\n        swap(arrIniIndex, i, i + 1);\n\n        logs.push(['swap-done', arrIniIndex[i], arrIniIndex[i + 1]]);\n\t\t\t}// end if\n      else {\n        logs.push(['compare-done', arrIniIndex[i], arrIniIndex[i + 1]]);\n      }\n\t\t}// end for\n\t}\n\treturn arrCopy;\n}\n\n// --------- Selection Sort ----------\nconst selectionSort = (arr, logs) => {\n  let arrCopy = [...arr]; // Prevent mutation\n  // arrIniIndex stores the index of each element in the initial unsorted list\n  let arrIniIndex = arrCopy.map((ele, index) => index);\n\n  // Sorting:\n  for (let i = 0; i < arrCopy.length - 1; ++i) {\n    let minIdx= i;\n    for (let j = i + 1; j < arrCopy.length; ++j) {\n      logs.push(['compare', arrIniIndex[i], arrIniIndex[j]]);\n      logs.push(['compare-done', arrIniIndex[i], arrIniIndex[j]]);\n      if (arrCopy[j] < arrCopy[minIdx]) {\n        minIdx = j;\n      } // if\n    } // inner for\n\n    logs.push(['swap', arrIniIndex[i], arrIniIndex[minIdx]]);\n    // Swapping array elements and their initial indexes\n    swap(arrCopy, i, minIdx);\n    swap(arrIniIndex, i, minIdx);\n\n    logs.push(['swap-done', arrIniIndex[i], arrIniIndex[minIdx]]);\n    logs.push(['sorted-bar', arrIniIndex[i]]);\n  } // outer for\n  return arrCopy;\n};\n\n\n// --------- Simple sort ------------\nconst simpleSort = (arr, logs) => {\n  let arrCopy = [...arr]; // Prevent mutation\n  // arrIniIndex stores the index of each element in the initial unsorted list\n  let arrIniIndex = arrCopy.map((ele, index) => index);\n\n  // Sorting:\n  for (let i = 0; i < arrCopy.length - 1; ++i) {\n    for (let j = i + 1; j < arrCopy.length; ++j) {\n      logs.push(['compare', arrIniIndex[i], arrIniIndex[j]]);\n      if (arrCopy[j] < arrCopy[i]) {\n        logs.push(['swap', arrIniIndex[i], arrIniIndex[j]]);\n        \n        // Swapping array elements and their initial indexes\n        swap(arrCopy, i, j);\n        swap(arrIniIndex, i, j);\n\n        logs.push(['swap-done', arrIniIndex[i], arrIniIndex[j]]);\n      } // if\n      else {\n        logs.push(['compare-done', arrIniIndex[i], arrIniIndex[j]]);\n      }\n    } // inner for\n    logs.push(['sorted-bar', arrIniIndex[i]]);\n  } // outer for\n  return arrCopy;\n};\n\n// -------- Merge Sort --------\n\n\n// Swapping\nconst swap = (arr, index1, index2) => {\n\tconst temp = arr[index1];\n\tarr[index1] = arr[index2];\n\tarr[index2] = temp;\n}; // swap()\n\n","const compareOp = (bar1, bar2, compareColor) => {\n  // Change color to compare color\n  bar1.style.backgroundColor = compareColor;\n  bar2.style.backgroundColor = compareColor;\n}\n\nconst swapOp = (bar1, bar2, swapColor, stepSpeed) => {\n  // Change color to swap color\n  bar1.style.backgroundColor = swapColor;\n  bar2.style.backgroundColor = swapColor;\n  \n  // Calculate the amount to translate\n  let translateAmount = bar2.getBoundingClientRect().x - \n                          bar1.getBoundingClientRect().x;\n  \n  // Animate translating first bar\n  bar1.style.transition = `transform ${stepSpeed / 1000}s`;\n  bar1.style.transform = `translateX(${translateAmount}px)`;\n\n  // Animate translating second bar\n  bar2.style.transition = `transform ${stepSpeed / 1000}s`;\n  bar2.style.transform = `translateX(${-translateAmount}px)`;\n}\n\nconst compareDoneOp = (bar1, bar2, unsortedColor) => {\n  // Change color to unsorted color\n  bar1.style.backgroundColor = unsortedColor;\n  bar2.style.backgroundColor = unsortedColor;\n}\n\nconst swapDoneOp = (bar1, bar2, unsortedColor) => {\n  // Change color to unsorted color\n  bar1.style.backgroundColor = unsortedColor;\n  bar2.style.backgroundColor = unsortedColor;\n\n  // Clear transition property\n  bar2.style.transition = 'transform 0s';\n  bar2.style.transform = `translateX(0px)`;\n\n  bar1.style.transition = 'transform 0s';\n  bar1.style.transform = `translateX(0px)`;\n\n  // Update bar order\n  const temp = bar2.style.order;\n  bar2.style.order = bar1.style.order;\n  bar1.style.order = temp;\n}\n\nconst sortedBarOp = (bar, sortedColor) => {\n  bar.style.backgroundColor = sortedColor;\n};\n\nconst animationOps = {\n  compareOp: compareOp,\n  swapOp: swapOp,\n  swapDoneOp: swapDoneOp,\n  compareDoneOp: compareDoneOp,\n  sortedBarOp: sortedBarOp\n}\n\n\nexport default animationOps;\n","import React from 'react';\nimport colors from '../../../../assets/colors';\nimport classes from './Button.module.css';\n\nconst button = (props) => {\n  const btnStyle = {\n    backgroundColor: colors.grey,\n    color: colors.background\n  };\n\n  return (\n      <button\n        style = {props.active ? btnStyle : null}\n        className = {classes.Button}\n        onClick = {props.click}>{props.children}</button>\n  );\n};\n\n\nexport default button;\n","import React from 'react';\nimport Button from '../ControlPanel/UI/Button/Button';\nimport classes from './ControlPanel.module.css';\nimport Aux from '../../hoc/Aux';\n\nconst controlPanel = (props) => { \n  return(\n    <Aux>\n      <div className={classes.SortAndStop}>\n        <Button click={props.sortClicked}>Sort</Button>\n        <Button click={props.abortClicked}>Abort</Button>\n      </div>\n      <div className={classes.Panel}>\n        <div className={classes.AlgoBtn}>\n          <Button \n            active={props.currentAlgo === 'selection'}\n            click={props.selectionClicked}>Selection Sort</Button>\n          <Button \n            active={props.currentAlgo === 'bubble'}\n            click={props.bubbleClicked}>Bubble Sort</Button>\n          <Button \n            active={props.currentAlgo === 'insertion'}\n            click={props.insertionClicked}>Insertion Sort</Button>\n          <Button \n            active={props.currentAlgo === 'simple'}\n            click={props.simpleClicked}>Simple Sort</Button>\n        </div>\n        <hr />\n        { // Future feature\n        /*\n        <div className={classes.InputDiv}>\n          <label>Array:</label>\n          <input className={classes.Input} value={props.array}/>\n        </div> */}\n        <div className={classes.BottomPanel}>\n          <div className={classes.BottomLeft}>\n            <Button click={props.randomClicked}>Randomize Array</Button>\n          </div>\n          <div className={classes.VerticalLine}></div>\n          <div className={classes.BottomRight}>\n            <div className={classes.SliderAndLabel}>\n              <label>Sorting Speed: </label>\n              <input \n                min='10' max='500' step='10' type='range' \n                value={props.speed}\n                onChange={event => props.changeSpeed(event.target.value)}\n                style={{direction: 'rtl'}}\n                className={classes.slider}/>\n            </div>\n            <div className={classes.SliderAndLabel}>\n              <label>Random Array Size: </label>\n              <input \n                min='5' max='50' step='5' type='range' \n                value={props.arrSize}\n                style={{direction: 'ltr'}}\n                onChange={event => props.changeArrSize(event.target.value)}\n                className={classes.slider}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Aux>\n  );\n};\n\nexport default controlPanel;\n","import React from 'react';\nimport Aux from '../../../hoc/Aux';\nimport Bars from './Bars/Bars';\nimport { getOperationLog } from '../../../assets/sort-visual-algos';\nimport colors from '../../../assets/colors';\nimport animationOps from '../../../assets/animation-ops';\nimport ControlPanel from '../../ControlPanel/ControlPanel';\n\n// color for color-coding operation\nconst COMPARE_COLOR = colors.tan;\nconst SWAP_COLOR = colors.blue;\nconst UNSORTED_COLOR = colors.grey;\nconst SORTED_COLOR = colors.green;\n\n// program default arguments\nconst INITIAL_ARR_SIZE = 15;\nconst INITIAL_SPEED = 100;\n\nclass SwapSort extends React.Component { \n  constructor(props) {\n    super(props);\n    const initialArr = this.randomArr(INITIAL_ARR_SIZE);\n\n    // Setting state\n    this.state = {\n      array: initialArr,\n      sortAlgo: 'simple',\n      randomArrSize: INITIAL_ARR_SIZE,\n      stepSpeed: INITIAL_SPEED\n    };\n  }\n  \n  // This function return a random array of inputted size\n  randomArr = (size) => {\n    let newArr = [];\n    for (let i = 0; i < size; ++i) {\n      newArr.push(Math.floor(Math.random() * 95 + 5));\n    }\n    return newArr;\n  };\n\n  // setTimeout and setInterval variable for clearTimeout and clearInterval\n  animation = null;\n  doneAnimate = null;\n  \n  // When sort button is clicked\n  sortHandler = (sortType) => {\n    // save the operation log for animation\n    const [logs, sortedArr] = getOperationLog(this.state.array, sortType);\n    // each element in logs is an array of length 3, the 3 constants below\n    // indecate what information each index holds\n    const LOG_TYPE = 0, INI_IDX1 = 1, INI_IDX2 = 2;\n    \n    // Initialize the bar order to their index and color to unsorted color\n    for (let i = 0; i < this.state.array.length; ++i) {\n      const bar = document.getElementById('bar' + i);\n      bar.style.backgroundColor = UNSORTED_COLOR;\n      bar.style.order = i;\n    }\n\n    // Animating based on operation logs\n    let i = 0; // controling loop\n    this.animation = setInterval(() => {\n      // Exit the timed loop when done iterating logs\n      if (i >= logs.length)\n      {\n        clearInterval(this.animation);\n      }\n      else {\n        // Find the 2 bars objects that gets swapped\n        const bar1 = document.getElementById('bar' + logs[i][INI_IDX1]);\n        const bar2 = document.getElementById('bar' + logs[i][INI_IDX2]);\n        const sortedBar = bar1;\n\n        // Make different animation based on the log\n        switch (logs[i][LOG_TYPE]) {\n          case 'compare':\n            animationOps.compareOp(bar1, bar2, COMPARE_COLOR);\n            break;\n          case 'swap':\n            animationOps.swapOp(bar1, bar2, SWAP_COLOR, this.state.stepSpeed);\n            break;\n          case 'compare-done':\n            animationOps.compareDoneOp(bar1, bar2, UNSORTED_COLOR);\n            break;\n          case 'swap-done':\n            animationOps.swapDoneOp(bar1, bar2, UNSORTED_COLOR);\n            break;\n          case 'sorted-bar':\n            animationOps.sortedBarOp(sortedBar, SORTED_COLOR);\n            break;\n          default:\n            break;\n        } // switch\n\n        // incrementing i for the next iteration\n        ++i;\n      }\n    }, this.state.stepSpeed); // End setInterval\n    \n    // When animation is done\n    this.doneAnimate = setTimeout (() => {\n      this.setState({array: sortedArr}); // Set array state to the sorted one\n\n      // Change bars color to sorted and reset all order\n      for (let i = 0; i < this.state.array.length; ++i) {\n        const bar = document.getElementById('bar' + i);\n        bar.style.backgroundColor = SORTED_COLOR;\n        bar.style.order = 0;\n      }\n    }, logs.length * this.state.stepSpeed); // End setTimeout\n  };\n\n  // When abort btn is clicked\n  abortClickedHandler = () => {\n    clearInterval(this.animation);\n    clearTimeout(this.doneAnimate);\n    \n    // Return the bars to their initial state\n    for (let i = 0; i < this.state.array.length; ++i) {\n      const bar = document.getElementById('bar' + i);\n      bar.style.order = 0;\n      bar.style.transform = 'translateX(0)';\n      bar.style.backgroundColor = UNSORTED_COLOR;\n    }\n  }\n\n  // When sort button is clicked\n  sortClickedHandler = () => {\n    this.abortClickedHandler(); // Abort in case sortin\n    this.sortHandler(this.state.sortAlgo);\n  };\n  \n  // When an algorithm button is clicked\n  changeAlgoHandler = (algoType) => {\n    this.setState({sortAlgo: algoType});\n  };\n\n  // When random button is clicked\n  clickRandomHandler = () => {\n    this.abortClickedHandler(); // Abort in case sortin\n\n    // generate a new array and change this array state to it\n    const newArr = this.randomArr(this.state.randomArrSize);\n    this.setState({array: newArr});\n\n    // Change all bars to unsorted color\n    for (let i = 0; i < this.state.array.length; ++i) {\n      const bar = document.getElementById('bar' + i);\n      bar.style.backgroundColor = UNSORTED_COLOR;\n    }\n  };\n  \n  // Update speed when slider input is changed\n  changeSpeedHandler = (newSpeed) => {\n    this.setState({stepSpeed: newSpeed});\n  }\n\n  // Update random array size when slider input is changed\n  changeArrSizeHandler = (newSize) => {\n    this.setState({randomArrSize: newSize});\n  }\n\n/*\n  // For testing\n  testHandler = () => {\n  };\n\n  componentDidUpdate() {\n    console.log('[SwapSort.js] componentDidUpdate');\n  }\n*/\n\n  render() {\n    return (\n      <Aux>\n        <h1>Sorting Visualizer</h1>\n        <Bars \n          array={this.state.array}/>\n        <ControlPanel \n          array={this.state.array}\n          abortClicked={this.abortClickedHandler}\n          changeArrSize={this.changeArrSizeHandler}\n          changeSpeed={this.changeSpeedHandler}\n          randomClicked={this.clickRandomHandler}\n          currentAlgo={this.state.sortAlgo}\n          arrSize={this.state.randomArrSize}\n          speed={this.state.stepSpeed}\n          sortClicked={this.sortClickedHandler}\n          selectionClicked={this.changeAlgoHandler.bind(this, 'selection')}\n          bubbleClicked={this.changeAlgoHandler.bind(this, 'bubble')}\n          insertionClicked={this.changeAlgoHandler.bind(this, 'insertion')}\n          simpleClicked={this.changeAlgoHandler.bind(this, 'simple')}/>\n        {/*<button onClick={this.testHandler}>Test</button>*/}\n      </Aux>\n    );\n  }\n}\n\n\nexport default SwapSort;\n","import SwapSort from './components/SortingPanels/SwapSort/SwapSort';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <SwapSort />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}